# coding: utf-8

"""
    GivEnergy API Documentation (v1.14.0)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.get_communication_device_information_by_serial_number200_response_data_inverter import GetCommunicationDeviceInformationBySerialNumber200ResponseDataInverter  # noqa: E501

class TestGetCommunicationDeviceInformationBySerialNumber200ResponseDataInverter(unittest.TestCase):
    """GetCommunicationDeviceInformationBySerialNumber200ResponseDataInverter unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetCommunicationDeviceInformationBySerialNumber200ResponseDataInverter:
        """Test GetCommunicationDeviceInformationBySerialNumber200ResponseDataInverter
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetCommunicationDeviceInformationBySerialNumber200ResponseDataInverter`
        """
        model = GetCommunicationDeviceInformationBySerialNumber200ResponseDataInverter()  # noqa: E501
        if include_optional:
            return GetCommunicationDeviceInformationBySerialNumber200ResponseDataInverter(
                serial = 'XO7968E671',
                status = 'NORMAL',
                last_online = '2019-12-22T00:58:24Z',
                last_updated = '1978-06-04T23:45:31Z',
                commission_date = '2013-07-20T03:14:06Z',
                info = openapi_client.models.get_communication_device_information_by_serial_number_200_response_data_inverter_info.getCommunicationDeviceInformationBySerialNumber_200_response_data_inverter_info(
                    battery_type = 'LEAD_ACID', 
                    battery = openapi_client.models.get_communication_device_information_by_serial_number_200_response_data_inverter_info_battery.getCommunicationDeviceInformationBySerialNumber_200_response_data_inverter_info_battery(
                        nominal_capacity = 165, 
                        nominal_voltage = 307, ), 
                    model = 'Commercial EMS', 
                    max_charge_rate = 2600, ),
                warranty = openapi_client.models.get_communication_device_information_by_serial_number_200_response_data_inverter_warranty.getCommunicationDeviceInformationBySerialNumber_200_response_data_inverter_warranty(
                    type = 'Standard', 
                    expiry_date = '2018-07-20T03:14:06Z', ),
                firmware_version = openapi_client.models.get_communication_device_information_by_serial_number_200_response_data_inverter_firmware_version.getCommunicationDeviceInformationBySerialNumber_200_response_data_inverter_firmware_version(
                    arm = '', 
                    dsp = '', ),
                connections = openapi_client.models.get_communication_device_information_by_serial_number_200_response_data_inverter_connections.getCommunicationDeviceInformationBySerialNumber_200_response_data_inverter_connections(
                    batteries = [{"serial":"wl3175e468","firmware_version":"64755","capacity":{"full":180.75,"design":186},"cell_count":16,"has_usb":true}], )
            )
        else:
            return GetCommunicationDeviceInformationBySerialNumber200ResponseDataInverter(
        )
        """

    def testGetCommunicationDeviceInformationBySerialNumber200ResponseDataInverter(self):
        """Test GetCommunicationDeviceInformationBySerialNumber200ResponseDataInverter"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
