# coding: utf-8

"""
    GivEnergy API Documentation (v1.14.0)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from openapi_client.models.get_data_points200_response_data_inner_power_battery import GetDataPoints200ResponseDataInnerPowerBattery
from openapi_client.models.get_data_points200_response_data_inner_power_consumption import GetDataPoints200ResponseDataInnerPowerConsumption
from openapi_client.models.get_data_points200_response_data_inner_power_grid import GetDataPoints200ResponseDataInnerPowerGrid
from openapi_client.models.get_data_points200_response_data_inner_power_inverter import GetDataPoints200ResponseDataInnerPowerInverter
from openapi_client.models.get_data_points200_response_data_inner_power_solar import GetDataPoints200ResponseDataInnerPowerSolar

class GetDataPoints200ResponseDataInnerPower(BaseModel):
    """
    GetDataPoints200ResponseDataInnerPower
    """
    solar: Optional[GetDataPoints200ResponseDataInnerPowerSolar] = None
    grid: Optional[GetDataPoints200ResponseDataInnerPowerGrid] = None
    battery: Optional[GetDataPoints200ResponseDataInnerPowerBattery] = None
    consumption: Optional[GetDataPoints200ResponseDataInnerPowerConsumption] = None
    inverter: Optional[GetDataPoints200ResponseDataInnerPowerInverter] = None
    __properties = ["solar", "grid", "battery", "consumption", "inverter"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetDataPoints200ResponseDataInnerPower:
        """Create an instance of GetDataPoints200ResponseDataInnerPower from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of solar
        if self.solar:
            _dict['solar'] = self.solar.to_dict()
        # override the default output from pydantic by calling `to_dict()` of grid
        if self.grid:
            _dict['grid'] = self.grid.to_dict()
        # override the default output from pydantic by calling `to_dict()` of battery
        if self.battery:
            _dict['battery'] = self.battery.to_dict()
        # override the default output from pydantic by calling `to_dict()` of consumption
        if self.consumption:
            _dict['consumption'] = self.consumption.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inverter
        if self.inverter:
            _dict['inverter'] = self.inverter.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetDataPoints200ResponseDataInnerPower:
        """Create an instance of GetDataPoints200ResponseDataInnerPower from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetDataPoints200ResponseDataInnerPower.parse_obj(obj)

        _obj = GetDataPoints200ResponseDataInnerPower.parse_obj({
            "solar": GetDataPoints200ResponseDataInnerPowerSolar.from_dict(obj.get("solar")) if obj.get("solar") is not None else None,
            "grid": GetDataPoints200ResponseDataInnerPowerGrid.from_dict(obj.get("grid")) if obj.get("grid") is not None else None,
            "battery": GetDataPoints200ResponseDataInnerPowerBattery.from_dict(obj.get("battery")) if obj.get("battery") is not None else None,
            "consumption": GetDataPoints200ResponseDataInnerPowerConsumption.from_dict(obj.get("consumption")) if obj.get("consumption") is not None else None,
            "inverter": GetDataPoints200ResponseDataInnerPowerInverter.from_dict(obj.get("inverter")) if obj.get("inverter") is not None else None
        })
        return _obj


