# coding: utf-8

"""
    GivEnergy API Documentation (v1.14.0)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr
from openapi_client.models.get_smart_device_by_id200_response_data_inner_other_data import GetSmartDeviceByID200ResponseDataInnerOtherData

class GetSmartDeviceByID200ResponseDataInner(BaseModel):
    """
    GetSmartDeviceByID200ResponseDataInner
    """
    uuid: Optional[StrictStr] = None
    alias: Optional[StrictStr] = None
    other_data: Optional[GetSmartDeviceByID200ResponseDataInnerOtherData] = None
    __properties = ["uuid", "alias", "other_data"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetSmartDeviceByID200ResponseDataInner:
        """Create an instance of GetSmartDeviceByID200ResponseDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of other_data
        if self.other_data:
            _dict['other_data'] = self.other_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetSmartDeviceByID200ResponseDataInner:
        """Create an instance of GetSmartDeviceByID200ResponseDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetSmartDeviceByID200ResponseDataInner.parse_obj(obj)

        _obj = GetSmartDeviceByID200ResponseDataInner.parse_obj({
            "uuid": obj.get("uuid"),
            "alias": obj.get("alias"),
            "other_data": GetSmartDeviceByID200ResponseDataInnerOtherData.from_dict(obj.get("other_data")) if obj.get("other_data") is not None else None
        })
        return _obj


