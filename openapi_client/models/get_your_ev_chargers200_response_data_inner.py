# coding: utf-8

"""
    GivEnergy API Documentation (v1.14.0)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictBool, StrictStr

class GetYourEVChargers200ResponseDataInner(BaseModel):
    """
    GetYourEVChargers200ResponseDataInner
    """
    uuid: Optional[StrictStr] = None
    serial_number: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    alias: Optional[StrictStr] = None
    online: Optional[StrictBool] = None
    went_offline_at: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    __properties = ["uuid", "serial_number", "type", "alias", "online", "went_offline_at", "status"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetYourEVChargers200ResponseDataInner:
        """Create an instance of GetYourEVChargers200ResponseDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetYourEVChargers200ResponseDataInner:
        """Create an instance of GetYourEVChargers200ResponseDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetYourEVChargers200ResponseDataInner.parse_obj(obj)

        _obj = GetYourEVChargers200ResponseDataInner.parse_obj({
            "uuid": obj.get("uuid"),
            "serial_number": obj.get("serial_number"),
            "type": obj.get("type"),
            "alias": obj.get("alias"),
            "online": obj.get("online"),
            "went_offline_at": obj.get("went_offline_at"),
            "status": obj.get("status")
        })
        return _obj


