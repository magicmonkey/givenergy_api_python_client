# coding: utf-8

"""
    GivEnergy API Documentation (v1.14.0)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr
from openapi_client.models.get_account_dongles_by_id200_response_data_inner_inverter_connections import GetAccountDonglesByID200ResponseDataInnerInverterConnections
from openapi_client.models.get_account_dongles_by_id200_response_data_inner_inverter_firmware_version import GetAccountDonglesByID200ResponseDataInnerInverterFirmwareVersion
from openapi_client.models.get_account_dongles_by_id200_response_data_inner_inverter_info import GetAccountDonglesByID200ResponseDataInnerInverterInfo
from openapi_client.models.get_account_dongles_by_id200_response_data_inner_inverter_warranty import GetAccountDonglesByID200ResponseDataInnerInverterWarranty

class GetAccountDonglesByID200ResponseDataInnerInverter(BaseModel):
    """
    GetAccountDonglesByID200ResponseDataInnerInverter
    """
    serial: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    last_online: Optional[StrictStr] = None
    last_updated: Optional[StrictStr] = None
    commission_date: Optional[StrictStr] = None
    info: Optional[GetAccountDonglesByID200ResponseDataInnerInverterInfo] = None
    warranty: Optional[GetAccountDonglesByID200ResponseDataInnerInverterWarranty] = None
    firmware_version: Optional[GetAccountDonglesByID200ResponseDataInnerInverterFirmwareVersion] = None
    connections: Optional[GetAccountDonglesByID200ResponseDataInnerInverterConnections] = None
    __properties = ["serial", "status", "last_online", "last_updated", "commission_date", "info", "warranty", "firmware_version", "connections"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetAccountDonglesByID200ResponseDataInnerInverter:
        """Create an instance of GetAccountDonglesByID200ResponseDataInnerInverter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of info
        if self.info:
            _dict['info'] = self.info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of warranty
        if self.warranty:
            _dict['warranty'] = self.warranty.to_dict()
        # override the default output from pydantic by calling `to_dict()` of firmware_version
        if self.firmware_version:
            _dict['firmware_version'] = self.firmware_version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of connections
        if self.connections:
            _dict['connections'] = self.connections.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetAccountDonglesByID200ResponseDataInnerInverter:
        """Create an instance of GetAccountDonglesByID200ResponseDataInnerInverter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetAccountDonglesByID200ResponseDataInnerInverter.parse_obj(obj)

        _obj = GetAccountDonglesByID200ResponseDataInnerInverter.parse_obj({
            "serial": obj.get("serial"),
            "status": obj.get("status"),
            "last_online": obj.get("last_online"),
            "last_updated": obj.get("last_updated"),
            "commission_date": obj.get("commission_date"),
            "info": GetAccountDonglesByID200ResponseDataInnerInverterInfo.from_dict(obj.get("info")) if obj.get("info") is not None else None,
            "warranty": GetAccountDonglesByID200ResponseDataInnerInverterWarranty.from_dict(obj.get("warranty")) if obj.get("warranty") is not None else None,
            "firmware_version": GetAccountDonglesByID200ResponseDataInnerInverterFirmwareVersion.from_dict(obj.get("firmware_version")) if obj.get("firmware_version") is not None else None,
            "connections": GetAccountDonglesByID200ResponseDataInnerInverterConnections.from_dict(obj.get("connections")) if obj.get("connections") is not None else None
        })
        return _obj


