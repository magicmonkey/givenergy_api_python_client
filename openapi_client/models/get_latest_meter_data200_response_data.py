# coding: utf-8

"""
    GivEnergy API Documentation (v1.14.0)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictBool, StrictStr
from openapi_client.models.get_latest_meter_data200_response_data_today import GetLatestMeterData200ResponseDataToday
from openapi_client.models.get_latest_meter_data200_response_data_total import GetLatestMeterData200ResponseDataTotal

class GetLatestMeterData200ResponseData(BaseModel):
    """
    GetLatestMeterData200ResponseData
    """
    time: Optional[StrictStr] = None
    today: Optional[GetLatestMeterData200ResponseDataToday] = None
    total: Optional[GetLatestMeterData200ResponseDataTotal] = None
    is_metered: Optional[StrictBool] = None
    __properties = ["time", "today", "total", "is_metered"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetLatestMeterData200ResponseData:
        """Create an instance of GetLatestMeterData200ResponseData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of today
        if self.today:
            _dict['today'] = self.today.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total
        if self.total:
            _dict['total'] = self.total.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetLatestMeterData200ResponseData:
        """Create an instance of GetLatestMeterData200ResponseData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetLatestMeterData200ResponseData.parse_obj(obj)

        _obj = GetLatestMeterData200ResponseData.parse_obj({
            "time": obj.get("time"),
            "today": GetLatestMeterData200ResponseDataToday.from_dict(obj.get("today")) if obj.get("today") is not None else None,
            "total": GetLatestMeterData200ResponseDataTotal.from_dict(obj.get("total")) if obj.get("total") is not None else None,
            "is_metered": obj.get("is_metered")
        })
        return _obj


