# coding: utf-8

"""
    GivEnergy API Documentation (v1.14.0)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictInt, StrictStr, conlist

from typing import Optional

from openapi_client.models.evget_data_points200_response import EvgetDataPoints200Response
from openapi_client.models.get_charging_sessions200_response import GetChargingSessions200Response
from openapi_client.models.get_charging_sessions_request import GetChargingSessionsRequest
from openapi_client.models.get_command_data200_response import GetCommandData200Response
from openapi_client.models.get_ev_charger_by_uuid200_response import GetEVChargerByUUID200Response
from openapi_client.models.get_supported_commands200_response import GetSupportedCommands200Response
from openapi_client.models.get_your_ev_chargers200_response import GetYourEVChargers200Response
from openapi_client.models.send_command200_response import SendCommand200Response

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class EVChargerApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def evget_data_points(self, charger_uuid : Annotated[StrictStr, Field(..., description="The UUID of the charger.")], start_time : Annotated[StrictStr, Field(..., description="The time of the earliest data point. Must be a valid date. Must be a date before <code>now</code>.")], end_time : Annotated[StrictStr, Field(..., description="The time of the latest data point. Must be a valid date. Must be a date after <code>start_time</code>.")], measurands : Annotated[conlist(StrictStr), Field(..., description="One or more measurands to filter by.")], meter_ids : Annotated[conlist(StrictInt), Field(..., description="The IDs of the measuring devices to fetch data for.")], page : Annotated[Optional[StrictInt], Field(description="Page number to return")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Number of items to return in a page. Defaults to 15")] = None, authorization : Optional[StrictStr] = None, **kwargs) -> EvgetDataPoints200Response:  # noqa: E501
        """Get Data Points  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.evget_data_points(charger_uuid, start_time, end_time, measurands, meter_ids, page, page_size, authorization, async_req=True)
        >>> result = thread.get()

        :param charger_uuid: The UUID of the charger. (required)
        :type charger_uuid: str
        :param start_time: The time of the earliest data point. Must be a valid date. Must be a date before <code>now</code>. (required)
        :type start_time: str
        :param end_time: The time of the latest data point. Must be a valid date. Must be a date after <code>start_time</code>. (required)
        :type end_time: str
        :param measurands: One or more measurands to filter by. (required)
        :type measurands: List[str]
        :param meter_ids: The IDs of the measuring devices to fetch data for. (required)
        :type meter_ids: List[int]
        :param page: Page number to return
        :type page: int
        :param page_size: Number of items to return in a page. Defaults to 15
        :type page_size: int
        :param authorization: 
        :type authorization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EvgetDataPoints200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the evget_data_points_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.evget_data_points_with_http_info(charger_uuid, start_time, end_time, measurands, meter_ids, page, page_size, authorization, **kwargs)  # noqa: E501

    @validate_arguments
    def evget_data_points_with_http_info(self, charger_uuid : Annotated[StrictStr, Field(..., description="The UUID of the charger.")], start_time : Annotated[StrictStr, Field(..., description="The time of the earliest data point. Must be a valid date. Must be a date before <code>now</code>.")], end_time : Annotated[StrictStr, Field(..., description="The time of the latest data point. Must be a valid date. Must be a date after <code>start_time</code>.")], measurands : Annotated[conlist(StrictStr), Field(..., description="One or more measurands to filter by.")], meter_ids : Annotated[conlist(StrictInt), Field(..., description="The IDs of the measuring devices to fetch data for.")], page : Annotated[Optional[StrictInt], Field(description="Page number to return")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Number of items to return in a page. Defaults to 15")] = None, authorization : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Data Points  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.evget_data_points_with_http_info(charger_uuid, start_time, end_time, measurands, meter_ids, page, page_size, authorization, async_req=True)
        >>> result = thread.get()

        :param charger_uuid: The UUID of the charger. (required)
        :type charger_uuid: str
        :param start_time: The time of the earliest data point. Must be a valid date. Must be a date before <code>now</code>. (required)
        :type start_time: str
        :param end_time: The time of the latest data point. Must be a valid date. Must be a date after <code>start_time</code>. (required)
        :type end_time: str
        :param measurands: One or more measurands to filter by. (required)
        :type measurands: List[str]
        :param meter_ids: The IDs of the measuring devices to fetch data for. (required)
        :type meter_ids: List[int]
        :param page: Page number to return
        :type page: int
        :param page_size: Number of items to return in a page. Defaults to 15
        :type page_size: int
        :param authorization: 
        :type authorization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EvgetDataPoints200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'charger_uuid',
            'start_time',
            'end_time',
            'measurands',
            'meter_ids',
            'page',
            'page_size',
            'authorization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method evget_data_points" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['charger_uuid']:
            _path_params['charger_uuid'] = _params['charger_uuid']


        # process the query parameters
        _query_params = []
        if _params.get('start_time') is not None:  # noqa: E501
            _query_params.append(('start_time', _params['start_time']))

        if _params.get('end_time') is not None:  # noqa: E501
            _query_params.append(('end_time', _params['end_time']))

        if _params.get('measurands') is not None:  # noqa: E501
            _query_params.append(('measurands', _params['measurands']))
            _collection_formats['measurands'] = 'multi'

        if _params.get('meter_ids') is not None:  # noqa: E501
            _query_params.append(('meter_ids', _params['meter_ids']))
            _collection_formats['meter_ids'] = 'multi'

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization']:
            _header_params['Authorization'] = _params['authorization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "EvgetDataPoints200Response",
        }

        return self.api_client.call_api(
            '/ev-charger/{charger_uuid}/meter-data', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_charging_sessions(self, charger_uuid : Annotated[StrictStr, Field(..., description="The UUID of the charger.")], page : Annotated[Optional[StrictInt], Field(description="Page number to return")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Number of items to return in a page. Defaults to 15")] = None, authorization : Optional[StrictStr] = None, get_charging_sessions_request : Optional[GetChargingSessionsRequest] = None, **kwargs) -> GetChargingSessions200Response:  # noqa: E501
        """Get Charging Sessions  # noqa: E501

        Fetch a list of all charging sessions for the given EV charger  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_charging_sessions(charger_uuid, page, page_size, authorization, get_charging_sessions_request, async_req=True)
        >>> result = thread.get()

        :param charger_uuid: The UUID of the charger. (required)
        :type charger_uuid: str
        :param page: Page number to return
        :type page: int
        :param page_size: Number of items to return in a page. Defaults to 15
        :type page_size: int
        :param authorization: 
        :type authorization: str
        :param get_charging_sessions_request:
        :type get_charging_sessions_request: GetChargingSessionsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetChargingSessions200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_charging_sessions_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_charging_sessions_with_http_info(charger_uuid, page, page_size, authorization, get_charging_sessions_request, **kwargs)  # noqa: E501

    @validate_arguments
    def get_charging_sessions_with_http_info(self, charger_uuid : Annotated[StrictStr, Field(..., description="The UUID of the charger.")], page : Annotated[Optional[StrictInt], Field(description="Page number to return")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Number of items to return in a page. Defaults to 15")] = None, authorization : Optional[StrictStr] = None, get_charging_sessions_request : Optional[GetChargingSessionsRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Charging Sessions  # noqa: E501

        Fetch a list of all charging sessions for the given EV charger  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_charging_sessions_with_http_info(charger_uuid, page, page_size, authorization, get_charging_sessions_request, async_req=True)
        >>> result = thread.get()

        :param charger_uuid: The UUID of the charger. (required)
        :type charger_uuid: str
        :param page: Page number to return
        :type page: int
        :param page_size: Number of items to return in a page. Defaults to 15
        :type page_size: int
        :param authorization: 
        :type authorization: str
        :param get_charging_sessions_request:
        :type get_charging_sessions_request: GetChargingSessionsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetChargingSessions200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'charger_uuid',
            'page',
            'page_size',
            'authorization',
            'get_charging_sessions_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_charging_sessions" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['charger_uuid']:
            _path_params['charger_uuid'] = _params['charger_uuid']


        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization']:
            _header_params['Authorization'] = _params['authorization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['get_charging_sessions_request'] is not None:
            _body_params = _params['get_charging_sessions_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "GetChargingSessions200Response",
        }

        return self.api_client.call_api(
            '/ev-charger/{charger_uuid}/charging-sessions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_command_data(self, charger_uuid : Annotated[StrictStr, Field(..., description="The UUID of the charger.")], command_id : Annotated[StrictStr, Field(..., description="The ID of the command.")], authorization : Optional[StrictStr] = None, **kwargs) -> GetCommandData200Response:  # noqa: E501
        """Get Command Data  # noqa: E501

        Fetch the current data for the given command and EV Charger  <aside class=\"notice\">A 422 error will be thrown if an invalid command ID is provided or if the given EV charger does not support the given command</aside>  The below response example is for the <code>change-mode</code> command  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_command_data(charger_uuid, command_id, authorization, async_req=True)
        >>> result = thread.get()

        :param charger_uuid: The UUID of the charger. (required)
        :type charger_uuid: str
        :param command_id: The ID of the command. (required)
        :type command_id: str
        :param authorization: 
        :type authorization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetCommandData200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_command_data_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_command_data_with_http_info(charger_uuid, command_id, authorization, **kwargs)  # noqa: E501

    @validate_arguments
    def get_command_data_with_http_info(self, charger_uuid : Annotated[StrictStr, Field(..., description="The UUID of the charger.")], command_id : Annotated[StrictStr, Field(..., description="The ID of the command.")], authorization : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Command Data  # noqa: E501

        Fetch the current data for the given command and EV Charger  <aside class=\"notice\">A 422 error will be thrown if an invalid command ID is provided or if the given EV charger does not support the given command</aside>  The below response example is for the <code>change-mode</code> command  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_command_data_with_http_info(charger_uuid, command_id, authorization, async_req=True)
        >>> result = thread.get()

        :param charger_uuid: The UUID of the charger. (required)
        :type charger_uuid: str
        :param command_id: The ID of the command. (required)
        :type command_id: str
        :param authorization: 
        :type authorization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetCommandData200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'charger_uuid',
            'command_id',
            'authorization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_command_data" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['charger_uuid']:
            _path_params['charger_uuid'] = _params['charger_uuid']

        if _params['command_id']:
            _path_params['command_id'] = _params['command_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization']:
            _header_params['Authorization'] = _params['authorization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "GetCommandData200Response",
        }

        return self.api_client.call_api(
            '/ev-charger/{charger_uuid}/commands/{command_id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_ev_charger_by_uuid(self, charger_uuid : Annotated[StrictStr, Field(..., description="The UUID of the charger.")], authorization : Optional[StrictStr] = None, **kwargs) -> GetEVChargerByUUID200Response:  # noqa: E501
        """Get EV Charger by UUID  # noqa: E501

        Return information about a single EV charger by its UUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_ev_charger_by_uuid(charger_uuid, authorization, async_req=True)
        >>> result = thread.get()

        :param charger_uuid: The UUID of the charger. (required)
        :type charger_uuid: str
        :param authorization: 
        :type authorization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetEVChargerByUUID200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_ev_charger_by_uuid_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_ev_charger_by_uuid_with_http_info(charger_uuid, authorization, **kwargs)  # noqa: E501

    @validate_arguments
    def get_ev_charger_by_uuid_with_http_info(self, charger_uuid : Annotated[StrictStr, Field(..., description="The UUID of the charger.")], authorization : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get EV Charger by UUID  # noqa: E501

        Return information about a single EV charger by its UUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_ev_charger_by_uuid_with_http_info(charger_uuid, authorization, async_req=True)
        >>> result = thread.get()

        :param charger_uuid: The UUID of the charger. (required)
        :type charger_uuid: str
        :param authorization: 
        :type authorization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetEVChargerByUUID200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'charger_uuid',
            'authorization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ev_charger_by_uuid" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['charger_uuid']:
            _path_params['charger_uuid'] = _params['charger_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization']:
            _header_params['Authorization'] = _params['authorization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "GetEVChargerByUUID200Response",
        }

        return self.api_client.call_api(
            '/ev-charger/{charger_uuid}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_supported_commands(self, charger_uuid : Annotated[StrictStr, Field(..., description="The UUID of the charger.")], authorization : Optional[StrictStr] = None, **kwargs) -> GetSupportedCommands200Response:  # noqa: E501
        """Get Supported Commands  # noqa: E501

        Fetch a list of all commands that are supported for the given EV charger  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_supported_commands(charger_uuid, authorization, async_req=True)
        >>> result = thread.get()

        :param charger_uuid: The UUID of the charger. (required)
        :type charger_uuid: str
        :param authorization: 
        :type authorization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetSupportedCommands200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_supported_commands_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_supported_commands_with_http_info(charger_uuid, authorization, **kwargs)  # noqa: E501

    @validate_arguments
    def get_supported_commands_with_http_info(self, charger_uuid : Annotated[StrictStr, Field(..., description="The UUID of the charger.")], authorization : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Supported Commands  # noqa: E501

        Fetch a list of all commands that are supported for the given EV charger  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_supported_commands_with_http_info(charger_uuid, authorization, async_req=True)
        >>> result = thread.get()

        :param charger_uuid: The UUID of the charger. (required)
        :type charger_uuid: str
        :param authorization: 
        :type authorization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetSupportedCommands200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'charger_uuid',
            'authorization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_supported_commands" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['charger_uuid']:
            _path_params['charger_uuid'] = _params['charger_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization']:
            _header_params['Authorization'] = _params['authorization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "GetSupportedCommands200Response",
        }

        return self.api_client.call_api(
            '/ev-charger/{charger_uuid}/commands', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_your_ev_chargers(self, page : Annotated[Optional[StrictInt], Field(description="Page number to return")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Number of items to return in a page. Defaults to 15")] = None, authorization : Optional[StrictStr] = None, **kwargs) -> GetYourEVChargers200Response:  # noqa: E501
        """Get Your EV Chargers  # noqa: E501

        Return a list of EV chargers registered to your account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_your_ev_chargers(page, page_size, authorization, async_req=True)
        >>> result = thread.get()

        :param page: Page number to return
        :type page: int
        :param page_size: Number of items to return in a page. Defaults to 15
        :type page_size: int
        :param authorization: 
        :type authorization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetYourEVChargers200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_your_ev_chargers_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_your_ev_chargers_with_http_info(page, page_size, authorization, **kwargs)  # noqa: E501

    @validate_arguments
    def get_your_ev_chargers_with_http_info(self, page : Annotated[Optional[StrictInt], Field(description="Page number to return")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Number of items to return in a page. Defaults to 15")] = None, authorization : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Your EV Chargers  # noqa: E501

        Return a list of EV chargers registered to your account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_your_ev_chargers_with_http_info(page, page_size, authorization, async_req=True)
        >>> result = thread.get()

        :param page: Page number to return
        :type page: int
        :param page_size: Number of items to return in a page. Defaults to 15
        :type page_size: int
        :param authorization: 
        :type authorization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetYourEVChargers200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'page',
            'page_size',
            'authorization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_your_ev_chargers" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization']:
            _header_params['Authorization'] = _params['authorization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "GetYourEVChargers200Response",
        }

        return self.api_client.call_api(
            '/ev-charger', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def send_command(self, charger_uuid : Annotated[StrictStr, Field(..., description="The UUID of the charger.")], command_id : Annotated[StrictStr, Field(..., description="The ID of the command.")], authorization : Optional[StrictStr] = None, **kwargs) -> SendCommand200Response:  # noqa: E501
        """Send Command  # noqa: E501

        Send a command to an EV Charger  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.send_command(charger_uuid, command_id, authorization, async_req=True)
        >>> result = thread.get()

        :param charger_uuid: The UUID of the charger. (required)
        :type charger_uuid: str
        :param command_id: The ID of the command. (required)
        :type command_id: str
        :param authorization: 
        :type authorization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SendCommand200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the send_command_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.send_command_with_http_info(charger_uuid, command_id, authorization, **kwargs)  # noqa: E501

    @validate_arguments
    def send_command_with_http_info(self, charger_uuid : Annotated[StrictStr, Field(..., description="The UUID of the charger.")], command_id : Annotated[StrictStr, Field(..., description="The ID of the command.")], authorization : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Send Command  # noqa: E501

        Send a command to an EV Charger  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.send_command_with_http_info(charger_uuid, command_id, authorization, async_req=True)
        >>> result = thread.get()

        :param charger_uuid: The UUID of the charger. (required)
        :type charger_uuid: str
        :param command_id: The ID of the command. (required)
        :type command_id: str
        :param authorization: 
        :type authorization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SendCommand200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'charger_uuid',
            'command_id',
            'authorization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_command" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['charger_uuid']:
            _path_params['charger_uuid'] = _params['charger_uuid']

        if _params['command_id']:
            _path_params['command_id'] = _params['command_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization']:
            _header_params['Authorization'] = _params['authorization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "SendCommand200Response",
        }

        return self.api_client.call_api(
            '/ev-charger/{charger_uuid}/commands/{command_id}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
